#!/bin/sh

######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
PATH="$(command -p getconf PATH 2>/dev/null)${PATH+:}${PATH-}"
export PATH
case $PATH in :*) PATH=${PATH#?} ;; esac
export UNIX_STD=2003 # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit() {
    cat <<-USAGE 1>&2
	Usage 
        ${0##*/} [options] [FILE]
        
	Options 
        -o <file>                           |--output=<file>
        -l <js|ts|java|kt>                  |--language=<js|ts|java|kt>
        -a <language-specific-parameter>    |--additional-parameters==<language-specific-parameter>
        
	Version
        2020-05-06 22:42:19 JST
	USAGE
    exit 1
}

error_exit() {
    ${2+:} false && echo "${0##*/}: $2" 1>&2
    exit $1
}

######################################################################
# Argument Parsing
######################################################################

# === Print usage and exit if one of the help options is set =========
case "$# ${1:-}" in
'1 -h' | '1 --help' | '1 --version') print_usage_and_exit ;;
esac

# === Initialize parameters ==========================================
input_file=''
output_file=''
language=''
additional_parameters=''

# === Read options ===================================================
while :; do
    case "${1:-}" in
    --output=*)
        output_file=$(printf '%s' "${1#--output=}" | tr -d '\n')
        shift
        ;;
    -o)
        output_file=$(printf '%s' "${2:-}" | tr -d '\n')
        shift 2
        ;;
    --language=*)
        language=$(printf '%s' "${1#--language=}" | tr -d '\n')
        shift
        ;;
    -l)
        language=$(printf '%s' "${2:-}" | tr -d '\n')
        shift 2
        ;;
    --additional_parameters=*)
        additional_parameters=$(printf '%s' "${1#--additional_parameters}" | tr -d '\n')
        shift
        ;;
    -a)
        additional_parameters=$(printf '%s' "${2:-}" | tr -d '\n')
        shift 2
        ;;
    -- | -)
        break
        ;;
    --* | -*)
        error_exit 1 'Invalid option'
        ;;
    *) break ;;
    esac
done

case $# in 1) input_file=$1 ;; *) print_usage_and_exit ;; esac
[ -f "$input_file" ] || {
    error_exit 1 "Invalid --file option, $input_file is not a file"
}

case "$language" in js | ts | java) ;; *) error_exit 1 "Invalid --language option, ${language} is not supported" ;; esac

# TODO: 標準出力を/dev/stdoutと決め打つことが互換性に与える影響を調べる
case "$output_file" in '') output_file='/dev/stdout' ;; esac

######################################################################
# Core Functions
######################################################################

# ------------------------------------
# Common Utils
# ------------------------------------

# $1=additional_parameters
parse_additional_parameters() {
    printf '%s' "${1}" | tr '=' ' ' | tr ',' '\n'
}

single_quote_to_double_quote() {
    tr "'" '"'
}

# ------------------------------------
# javascript
# ------------------------------------

make_notes_js() {
    cat <<-EOF
/*
* This file is automatically generated by 'firepath' command.
* You can see more details here.
* https://github.com/ppdx999/firestore
*/

EOF
}

# $1=structure
make_col_args_js() {
    args=''
    for arg in $(printf '%s' "${1}" | sed -e 's;/[^/]*$;;' | tr '/' ' '); do
        case "$arg" in
        ...*)
            args="${args}, ${arg#...}Ids"
            ;;
        *)
            args="${args}, ${arg}Id"
            ;;
        esac
    done
    printf '%s' "${args#, }"
}

# $1=structure
make_doc_args_js() {
    args=''
    for arg in $(printf '%s' "$1" | tr '/' ' '); do
        case "$arg" in
        ...*)
            args="${args}, ${arg#...}Ids"
            ;;
        *)
            args="${args}, ${arg}Id"
            ;;
        esac
    done
    printf '%s' "${args#, }"
}

# $1=structure
make_col_path_js() {
    col_path=''
    last=$(printf '%s' "$1" | sed -e 's;^.*/;;' -e 's;^\.\.\.;;')
    for str in $(printf '%s' "$1" | sed -e 's;/[^/]*$;;' | tr '/' ' '); do
        case "$str" in
        ...*)
            str=${str#...}
            col_path="${col_path}${str}Ids.map((id) => \"/${str}/\" + id).join('') + "
            ;;
        *)
            col_path="${col_path}\"/${str}/\" + ${str}Id + "
            ;;
        esac
    done
    printf '%s' "${col_path} \"/${last}\""
}

# $1=structure
make_doc_path_js() {
    doc_path=''
    for str in $(printf '%s' "$1" | tr '/' ' '); do
        case "$str" in
        ...*)
            str=${str#...}
            doc_path="${doc_path}${str}Ids.map((id) => \"/${str}/\" + id ).join('') + "
            ;;
        *)
            doc_path="${doc_path}\"/${str}/\" + ${str}Id + "
            ;;
        esac
    done
    printf '%s' "${doc_path% + }"
}

# $1=name
# $2=structure
# $3=additional_parameters
make_func_js() {
    printf 'export function %s(%s) {\n  return %s;\n}\n\n' "${1}CollectionPath" "$(make_col_args_js "$2")" "$(make_col_path_js "$2")"
    printf 'export function %s(%s) {\n  return %s;\n}\n\n' "${1}DocumentPath" "$(make_doc_args_js "$2")" "$(make_doc_path_js "$2")"
}

# ------------------------------------
# typescript
# ------------------------------------

make_notes_ts() {
    make_notes_js
}

# $1=structure
make_col_args_ts() {
    args=''
    for arg in $(printf '%s' "${1}" | sed -e 's;/[^/]*$;;' | tr '/' ' '); do
        case "$arg" in
        ...*)
            args="${args}, ${arg#...}Ids: string[]"
            ;;
        *)
            args="${args}, ${arg}Id: string"
            ;;
        esac
    done
    printf '%s' "${args#, }"
}

# $1=structure
make_doc_args_ts() {
    args=''
    for arg in $(printf '%s' "$1" | tr '/' ' '); do
        case "$arg" in
        ...*)
            args="${args}, ${arg#...}Ids: string[]"
            ;;
        *)
            args="${args}, ${arg}Id: string"
            ;;
        esac
    done
    printf '%s' "${args#, }"
}

# $1=structure
make_col_path_ts() {
    make_col_path_js "$@"
}

# $1=structure
make_doc_path_ts() {
    make_doc_path_js "$@"
}

# $1=name
# $2=structure
# $3=additional_parameters
make_func_ts() {
    printf 'export function %s(%s) {\n  return %s;\n}\n\n' "${1}CollectionPath" "$(make_col_args_ts "$2")" "$(make_col_path_ts "$2")"
    printf 'export function %s(%s) {\n  return %s;\n}\n\n' "${1}DocumentPath" "$(make_doc_args_ts "$2")" "$(make_doc_path_ts "$2")"
}

# ------------------------------------
# Java
# ------------------------------------

make_notes_java() {
    make_notes_js
}

# $1=input_file
# $2=additional_parameters
make_pre_func_java() {

    package=''
    while read -r key value; do
        echo "$key" "$value" 1>&2
        case "$key" in
        package)
            package="package $value;"
            ;;
        esac
    done <<EOF
    $(parse_additional_parameters "$2")
EOF

    cat <<EOF
$package

public class Firepath {

  private static String makeRecursivePath(String name, String[] ids) {
    StringBuffer path = new StringBuffer();
    for(String id : ids){
        path.append("/" + name + "/" + id );
    }
    return path.toString();
  }

EOF
}

# $1=input_file
# $2=additional_parameters
make_post_func_java() {
    cat <<EOF
}

EOF
}

# $1=structure
make_col_args_java() {
    args=''
    for arg in $(printf '%s' "${1}" | sed -e 's;/[^/]*$;;' | tr '/' ' '); do
        case "$arg" in
        ...*)
            args="${args}, String[] ${arg#...}Ids"
            ;;
        *)
            args="${args}, String ${arg}Id"
            ;;
        esac
    done
    printf '%s' "${args#, }"
}

# $1=structure
make_doc_args_java() {
    args=''
    for arg in $(printf '%s' "${1}" | tr '/' ' '); do
        case "$arg" in
        ...*)
            args="${args}, String[] ${arg#...}Ids"
            ;;
        *)
            args="${args}, String ${arg}Id"
            ;;
        esac
    done
    printf '%s' "${args#, }"
}

# $1=structure
make_col_path_java() {
    col_path=''
    last=$(printf '%s' "$1" | sed -e 's;^.*/;;' -e 's;^\.\.\.;;')
    for str in $(printf '%s' "$1" | sed -e 's;/[^/]*$;;' | tr '/' ' '); do
        case "$str" in
        ...*)
            str=${str#...}
            col_path="${col_path}makeRecursivePath(\"${str}\", ${str}Ids) + "
            ;;
        *)
            col_path="${col_path}\"/${str}/\" + ${str}Id + "
            ;;
        esac
    done
    printf '%s' "${col_path} \"/${last}\""
}

# $1=structure
make_doc_path_java() {
    doc_path=''
    for str in $(printf '%s' "$1" | tr '/' ' '); do
        case "$str" in
        ...*)
            str=${str#...}
            doc_path="${doc_path}makeRecursivePath(\"${str}\", ${str}Ids) + "
            ;;
        *)
            doc_path="${doc_path}\"/${str}/\" + ${str}Id + "
            ;;
        esac
    done
    printf '%s' "${doc_path% + }"
}

# $1=name
# $2=structure
# $3=additional_parameters
make_func_java() {
    printf '  public static String %s(%s) {\n    return %s;\n  }\n\n' "${1}CollectionPath" "$(make_col_args_java "$2")" "$(make_col_path_java "$2")"
    printf '  public static String %s(%s) {\n    return %s;\n  }\n\n' "${1}DocumentPath" "$(make_doc_args_java "$2")" "$(make_doc_path_java "$2")"
}
######################################################################
# Main Routine
######################################################################

make_func=':'
make_notes=':'
make_pre_func=':'
make_post_func=':'
case "$language" in
js)
    make_func="make_func_js"
    make_notes="make_notes_js"
    ;;
ts)
    make_func="make_func_ts"
    make_notes="make_notes_ts"
    ;;
java | kt)
    make_func="make_func_java"
    make_notes="make_notes_java"
    make_pre_func="make_pre_func_java"
    make_post_func="make_post_func_java"
    ;;

esac

{
    $make_notes "$input_file" "$additional_parameters"
    $make_pre_func "$input_file" "$additional_parameters"
    grep -v '^#' "$input_file" | while read -r name structure; do
        $make_func "$name" "$structure" "$additional_parameters"
    done
    $make_post_func "$input_file" "$additional_parameters"
} >"$output_file"
